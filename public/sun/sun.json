<?
header('Content-type: application/json');

$cities = array(
  'nyc' => array('latd'=>40,'latm'=>47,'lond'=>-73,'lonm'=>58,'loc'=>'America/New_York') 
);

$hoursAgo = 6;

$boilerplate = array(//constants for the POST request

    'FFX' => 2,
    'obj' => 10,
    'xxi' => 1, //minute intervals
    'ZZZ' => 'END'
);

?>
{
  "graph" : {
    "title"                : "Sun Elevation",
    "total"                : "false",
    "type"                 : "line",
    "refreshEveryNSeconds" : 120,
    "datasequences" : [     
<?

$places = explode(',', strtolower($_GET['places']));
$colors = isset($_GET['colors']) ? explode(',', $_GET['colors']) : array();
foreach($places as $idx => $place)
{
  $color = "white";
  if(count($colors) > 0)
  {
    $color = $colors[$idx % count($colors)];
  }
  if(isset($cities[$place]))
  {
?>
      {
        "title"      : "<?= $place?>",
        "color"      : "<?= $color?>"
        "datapoints" : [  
<?
    $city = $cities[$place];
    date_default_timezone_set($city['loc']);
    $date = date("YmjHi,Z");
    $date = explode(',', $date);
    $offset = $date[1] / 3600; //seconds -> hours
    $date = $date[0];
    $year  = substr($date,0,4);
    $month = substr($date,4,2);
    $day   = substr($date,6,2);
    $hour  = substr($date,8,2);
    $min   = substr($date,10,2);
    
    $file = dirname(__FILE__)."/$year$month$day-$place.txt";
    if(file_exists($file))
    {
      processFile($file);
    }
    else
    {
      $fields = array_merge($boilerplate,array(
        'xxy' => $year,
        'xxm' => $month,
        'xxd' => $day,
        'place' => $place,
        'xx0' => ($city['lond'] > 0 ? 1 : -1),
        'xx1' => abs($city['lond']),
        'xx2' => abs($city['lonm']),
        'yy0' => ($city['lond'] > 0 ? 1 : -1),
        'yy1' => abs($city['latd']),
        'yy2' => abs($city['latm']),
        'zz0' => ($offset > 0 ? 1 : -1),
        'zz1' => abs($offset)
      ));
      $fields_string = '';
      foreach($fields as $key=>$value)
      {
        $fields_string .= $key.'='.$value.'&';
      }
      rtrim($fields_string, '&');
      $url = 'http://aa.usno.navy.mil/cgi-bin/aa_altazw.pl';
      $fp = fopen($file, 'w');
      $ch = curl_init($url);
      curl_setopt($ch, CURLOPT_FILE, $fp);
      curl_setopt($ch,CURLOPT_POST, count($fields));
      curl_setopt($ch,CURLOPT_POSTFIELDS, $fields_string);
      $data = curl_exec($ch);
      curl_close($ch);
      fclose($fp);
      if($data)
      {
        cleanFile($file);
        processFile($file);
      }
      else
      {
        unlink($file);
        print('could not get file');
      }
    }
  }
?>        ]
      }
<?
}

function cleanFile($file)
{  
  $lines = file($file);
  $lines = array_slice($lines, 24,count($lines) - 24 - 1 - 4);//relevant lines
  $lines = preg_replace('/ +/',',',$lines);//turn into csv
  foreach($lines as $idx => $line)
  {
    $raw = explode(',', $line);
    $lines[$idx] = array(
      'hour' => substr($raw[0],0,2),
      'min'  => substr($raw[0],3),
      'alt'  => $raw[1],
      'az'   => $raw[2]
    );
  }
  file_put_contents($file, serialize($lines));
}

function processFile($file)
{
  global $hour, $min, $hoursAgo;
  
  $data = unserialize(file_get_contents($file));
  
  $time = array();
  $first = $data[0];
  if
  ( //it's currently earlier than our first data point
    $first['hour'] > $hour  ||
    ($first['hour'] == $hour && $first['min'] > $min))
  {
    $time['start'] = $first;
    $time['start']['idx'] = 0;
    $time['end'] = $first;
    $time['end']['hour'] = $hoursAgo + intval($time['end']['hour'],'0');
    $time['end']['idx'] = count($data) - 1; //will be overwritten
  }
  else
  {
    if
    (  //if our window start before the first data point
      $first['hour'] > $hour - $hoursAgo ||
      ($first['hour'] == $hour - $hoursAgo && $first['min'] > $min)
    )
    {
      $time['start'] = $first;
      $time['start']['idx'] = 0;
    }
    else
    {
      $time['start'] = array(
        'hour' => $hour - $hoursAgo,
        'min'  => $min,
        'idx'  => 0 //will be overwritten
      );
    }
    $last = end($data);
    reset($data);
    if
    ( //if our window ends before the last data point
      $last['hour'] < $hour ||
      ($last['hour'] == $hour && $last['min'] < $min)
    )
    {
      $time['end'] = $last;
      $time['end']['idx'] = count($data) - 1;
    }
    else
    {
      $time['end'] = array(
        'hour' => $hour,
        'min'  => $min,
        'idx'  => count($data) - 1 //will be overwritten
      );
    }
  }
  $idx = 0;
  while
  (
    (
      $time['start']['idx'] == 0 ||
      $time['end']['idx']   == count($data) - 1
    ) && 
    $idx < count($data)
  )
  {
    if
    (
      $data[$idx]['hour'] == $time['start']['hour'] &&
      $data[$idx]['min']  == $time['start']['min']
    )
    {
      $time['start']['idx'] = $idx;
    }
    if
    (
      $data[$idx]['hour'] == $time['end']['hour'] &&
      $data[$idx]['min']  == $time['end']['min']
    )
    {
      $time['end']['idx'] = $idx;
    }
    $idx++; 
  }
  $data = array_slice
  (
    $data,
    $time['start']['idx'],
    $time['end']['idx'] - $time['start']['idx'] + 1
  );

  foreach($data as $index => $datum)
  {
    echo '          '.
         '{"title":"'.$datum['hour'].':'.$datum['min'].'","value":'.$datum['alt']."}".
         (($index != count($data) - 1) ? ',' : '')."\n";
  }
}
?>
    ]
  }
}